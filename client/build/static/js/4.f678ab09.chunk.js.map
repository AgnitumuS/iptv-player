{"version":3,"sources":["components/channelCard.js","components/channels.js"],"names":["Img","className","alt","src","onError","res","useImage","srcList","ChannelCard","channel","to","id","Suspense","fallback","name","logo","e","target","Channels","searchTerm","React","useState","channels","setChannels","useEffect","a","getChannels","channelsData","fetchChannels","searchedChannels","filter","toLowerCase","includes","Cell","columnIndex","key","rowIndex","style","channelIndex","height","isScrolling","onChildScroll","scrollTop","disableHeight","width","columnCount","Math","floor","autoHeight","cellRenderer","columnWidth","onScroll","rowCount","ceil","length","rowHeight"],"mappings":"6MAKMA,EAAM,SAAC,GAAoC,IAAnCC,EAAkC,EAAlCA,UAAWC,EAAuB,EAAvBA,IAAKC,EAAkB,EAAlBA,IAAKC,EAAa,EAAbA,QAC3BC,EAAMC,mBAAS,CACnBC,QAAS,CAACJ,EAAK,uBAGjB,OACE,yBACEA,IAAKE,EAAIF,IACTF,UAAaA,EACbC,IAAOA,EACPE,QAAWA,KAgCFI,EA3BK,SAAC,GAAiB,IAAfC,EAAc,EAAdA,QAQrB,OACE,kBAAC,IAAD,CAAMC,GAAE,WAAMD,EAAQE,KACpB,yBAAKV,UAAU,qFACb,yBAAKA,UAAU,oDACf,kBAAC,IAAMW,SAAP,CAAgBC,SAAU,kBAAC,IAAD,OACxB,kBAAC,EAAD,CACEZ,UAAY,qBACZC,IAAOO,EAAQK,KAAK,QACpBX,IAAOM,EAAQM,MAAQ,oBACvBX,QAfc,SAACY,GACF,uDAAjBA,EAAEC,OAAOd,MACXa,EAAEC,OAAOd,IAAI,2DAiBX,wBAAIF,UAAU,2DAA2DQ,EAAQK,SC2B1EI,UA9DE,SAAC,GAA6B,IAA5BjB,EAA2B,EAA3BA,UAAWkB,EAAgB,EAAhBA,WAAgB,EACZC,IAAMC,SAAS,IADH,mBACrCC,EADqC,KAC3BC,EAD2B,KAG5CH,IAAMI,WAAU,YACK,uCAAG,4BAAAC,EAAA,sEACOC,cADP,OACdC,EADc,OAEpBJ,EAAYI,GAFQ,2CAAH,qDAInBC,KACC,IAEH,IAAMC,EAAmBV,EAAaG,EAASQ,QAAO,SAAArB,GAAO,OAC3DA,EAAQK,KAAKiB,cAAcC,SAASb,EAAWY,kBAC1CT,EAEDW,EAAO,SAAC,GAA2C,IAAzCC,EAAwC,EAAxCA,YAAaC,EAA2B,EAA3BA,IAAKC,EAAsB,EAAtBA,SAAUC,EAAY,EAAZA,MACpCC,EAA2B,EAAXF,EAAgBF,EACtC,GAAKL,EAAiBS,GACtB,OACA,wBAAIrC,UAAU,YAAYkC,IAAKA,EAAKE,MAAOA,GACzC,yBAAKpC,UAAU,qBACf,kBAAC,EAAD,CAAaQ,QAASoB,EAAiBS,QAQ3C,OACE,yBAAKrC,UAAS,UAAKA,EAAL,oCACZ,kBAAC,IAAD,MACG,gBAAGsC,EAAH,EAAGA,OAAQC,EAAX,EAAWA,YAAaC,EAAxB,EAAwBA,cAAeC,EAAvC,EAAuCA,UAAvC,OACC,kBAAC,IAAD,CAAWC,eAAa,IAEpB,YAAc,IAAZC,EAAW,EAAXA,MACMC,EAAcC,KAAKC,MAAMH,EATzB,KAUN,OACE,kBAAC,IAAD,CACEI,YAAU,EACVC,aAAchB,EACdY,YAAaA,EACbK,YAfE,IAgBFX,OAAQA,EACRC,YAAaA,EACbW,SAAUV,EACVC,UAAWA,EACXU,SAAUN,KAAKO,KAAKxB,EAAiByB,OAAOT,GAC5CU,UApBA,IAqBAX,MAAOA,EACP3C,UAAY","file":"static/js/4.f678ab09.chunk.js","sourcesContent":["import React from 'react';\nimport { useImage } from 'react-image';\nimport { Link } from 'react-router-dom';\nimport LoadingSpinner from './loadingSpinner';\n\nconst Img = ({className, alt, src, onError}) => {\n  const res = useImage({\n    srcList: [src, 'icons8-tv-100.png'],\n  });\n \n  return (\n    <img \n      src={res.src}\n      className = {className}\n      alt = {alt}\n      onError = {onError}\n    />\n  )\n}\n\nconst ChannelCard = ({ channel }) => {\n  // backup image in case original img source fails\n  const imgErrorHandler = (e) => {\n    if (e.target.src !== \"https://picsum.photos/600/400.jpg?blur=6&grayscale\") { // this prevents infinite loop error in cases where the backup image itself is down\n      e.target.src=\"https://picsum.photos/600/400.jpg?blur=6&grayscale\";\n    }\n  };\n\n  return (\n    <Link to={`/${channel.id}`}>\n      <div className=\"group cursor-pointer rounded shadow-md hover:shadow-2xl w-full h-full bg-gray-100\">\n        <div className='w-full h-32 p-3 flex items-center justify-center'>\n        <React.Suspense fallback={<LoadingSpinner />}>\n          <Img\n            className = 'mx-auto max-h-full'\n            alt = {channel.name+' logo'} \n            src = {channel.logo || \"icons8-tv-100.png\"}\n            onError = {imgErrorHandler}\n          />\n        </React.Suspense>\n        </div>\n        <h5 className=\"group-hover:text-gray-900 text-gray-700 font-medium p-3\">{channel.name}</h5>\n      </div>\n    </Link>\n  );\n};\n\nexport default ChannelCard;\n","import React from 'react';\nimport { WindowScroller, AutoSizer, Grid } from 'react-virtualized';\nimport 'react-virtualized/styles.css';\nimport getChannels from '../fetchChannels';\nimport ChannelCard from './channelCard';\n\nconst Channels = ({className, searchTerm}) => {\n  const [channels, setChannels] = React.useState([]);\n\n  React.useEffect(() => {\n    const fetchChannels = async () => {\n      const channelsData = await getChannels();\n      setChannels(channelsData);\n    }\n    fetchChannels();\n  }, []);\n\n  const searchedChannels = searchTerm ? channels.filter(channel => (\n    channel.name.toLowerCase().includes(searchTerm.toLowerCase())\n    )) : channels;\n\n  const Cell = ({ columnIndex, key, rowIndex, style }) => {\n    const channelIndex = (rowIndex * 6) + columnIndex; \n    if (!searchedChannels[channelIndex]) return; // exit if the channel on that index doesn't exist\n    return (\n    <li className=\"list-none\" key={key} style={style}>\n      <div className=\"p-3 h-full w-full\">\n      <ChannelCard channel={searchedChannels[channelIndex]} />\n      </div>\n    </li>\n  )};\n\n  // To choose a good number for height & width, go to https://nerdcave.com/tailwind-cheat-sheet and select a size as per Tailwind standards\n  const columnWidth = 192; // This is the cell width. Card size will be smaller due to padding\n  const rowHeight = 224; // This is the cell height. Card size will be smaller due to padding\n  return (\n    <div className={`${className} min-h-screen container mx-auto`}>\n      <WindowScroller>\n        {({ height, isScrolling, onChildScroll, scrollTop }) => (\n          <AutoSizer disableHeight>\n            {\n              ({width}) => {\n                const columnCount = Math.floor(width/columnWidth);\n                return (\n                  <Grid\n                    autoHeight\n                    cellRenderer={Cell}\n                    columnCount={columnCount}\n                    columnWidth={columnWidth}\n                    height={height}\n                    isScrolling={isScrolling}\n                    onScroll={onChildScroll}\n                    scrollTop={scrollTop}\n                    rowCount={Math.ceil(searchedChannels.length/columnCount)}\n                    rowHeight={rowHeight}\n                    width={width}\n                    className = \"flex justify-center\"\n                  />\n                )\n              }\n            }\n          </AutoSizer>\n        )}\n      </WindowScroller>\n    </div>\n  );\n};\n\nexport default Channels;"],"sourceRoot":""}