{"version":3,"sources":["components/loadingSpinner.js","fetchChannels.js","components/App.js","components/videoPlayer.js","serviceWorker.js","index.js"],"names":["LoadingSpinner","className","getChannels","condition","a","query","request","iptv_channels","Channels","React","lazy","App","useState","searchTerm","setSearchTerm","type","placeholder","value","onChange","event","target","Suspense","fallback","VideoPlayer","match","url","channel","setChannel","isError","details","error","setError","useEffect","getChannel","params","id","channelData","fetchChannels","playing","controls","width","height","config","file","attributes","crossOrigin","onError","err","data","Boolean","window","location","hostname","ReactDOM","render","StrictMode","exact","path","component","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"6FAAA,oBASeA,IAPQ,kBACrB,yBAAKC,UAAU,WACb,yBAAKA,UAAU,+BACf,yBAAKA,UAAU,kC,qECHbC,EAAW,uCAAG,WAAOC,GAAP,mBAAAC,EAAA,4DACD,qCAEXC,EAHY,sDAIDF,GAAa,GAJZ,wIAiBaG,kBAhBd,qCAgBgCD,GAjB/B,uBAiBVE,EAjBU,EAiBVA,cAjBU,kBAkBXA,GAlBW,2CAAH,sDAqBFL,O,4KCrBTM,EAAWC,IAAMC,MAAK,kBAAM,uDAuBnBC,EArBH,WAAO,IAAD,EACoBF,IAAMG,SAAS,IADnC,mBACTC,EADS,KACGC,EADH,KAIhB,OACA,oCACE,yBAAKb,UAAU,yFACb,2BACEA,UAAU,8BACVc,KAAK,OACLC,YAAY,SACZC,MAAOJ,EACPK,SAVsB,SAACC,GAAD,OAAWL,EAAcK,EAAMC,OAAOH,WAahE,kBAAC,IAAMI,SAAP,CAAgBC,SAAU,kBAAC,IAAD,OACxB,kBAACd,EAAD,CAAUP,UAAU,QAAQY,WAAYA,O,kDCoC/BU,EApDK,SAAC,GAAa,IAAZC,EAAW,EAAXA,MAAW,EACDf,IAAMG,SAAS,CAACa,IAAK,OADpB,mBACxBC,EADwB,KACfC,EADe,OAELlB,IAAMG,SAAS,CACvCgB,SAAS,EACTC,QAAS,KAJoB,mBAExBC,EAFwB,KAEjBC,EAFiB,KAe/B,OARAtB,IAAMuB,WAAU,YACK,uCAAG,4BAAA5B,EAAA,sEACM6B,YAAW,sBAAD,OAAuBT,EAAMU,OAAOC,GAApC,QADhB,OACdC,EADc,OAEpBT,EAAWS,EAAY,IAFH,2CAAH,qDAInBC,KACC,CAACb,EAAMU,OAAOC,KAGf,oCACEL,EAAMF,SAAY,yBAAK3B,UAAU,mEACjC,6BACE,yBAAKA,UAAU,2BAAf,6CACA,yBAAKA,UAAU,iBAAf,WAAwC6B,EAAMD,QAAQd,KAAtD,OAGJ,6BACE,yBAAKd,UAAU,qBACb,kBAAC,IAAD,CACEA,UAAU,WACVwB,IAAKC,EAAQD,IACba,SAAO,EACPC,UAAQ,EACRC,MAAM,OACNC,OAAO,OACPC,OAAQ,CACNC,KAAM,CACJC,WAAY,CACVC,YAAa,UAInBC,QAAW,SAACC,EAAKC,GACf,OAAOjB,EAAS,CACdH,SAAS,EACTC,QAASmB,WClCHC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAAS5B,MACvB,2DCVN6B,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,IAAD,KACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,IAAIC,UAAW/C,IACjC,kBAAC,IAAD,CAAO8C,KAAK,OAAOC,UAAWnC,OAKnCoC,SAASC,eAAe,SDiHrB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAArC,GACLsC,QAAQtC,MAAMA,EAAMuC,c","file":"static/js/main.298362be.chunk.js","sourcesContent":["import React from 'react';\n\nconst LoadingSpinner = () => (\n  <div className=\"spinner\">\n    <div className=\"double-bounce1 bg-gray-600\"></div>\n    <div className=\"double-bounce2 bg-gray-600\"></div>\n  </div>\n);\n\nexport default LoadingSpinner;","import { request } from 'graphql-request'\n\nconst getChannels = async (condition) => {\n  const endpoint = 'https://api.webtv.rocks/v1/graphql';\n\n  const query = `query selectAllChannels {\n    iptv_channels${condition || ''} {\n      id\n      country\n      category\n      language\n      logo\n      name\n      url\n      views\n    }\n  }\n  `;\n\n  const { iptv_channels} = await request(endpoint, query);\n  return iptv_channels;\n}\n\nexport default getChannels;\n","import React from 'react';\nimport LoadingSpinner from './loadingSpinner';\nconst Channels = React.lazy(() => import('./channels'));\n\nconst App = () => {\n  const [searchTerm, setSearchTerm] = React.useState('');\n  const searchChangeHandler = (event) => setSearchTerm(event.target.value);\n\n  return (\n  <>\n    <div className=\"shadow-md h-12 flex justify-center items-center fixed top-0 w-screen z-10 bg-gray-300\">\n      <input \n        className=\"rounded p-2 h-8 w-64 shadow\" \n        type=\"text\" \n        placeholder=\"Search\" \n        value={searchTerm}\n        onChange={searchChangeHandler}\n      />\n    </div>\n    <React.Suspense fallback={<LoadingSpinner />}>\n      <Channels className=\"mt-12\" searchTerm={searchTerm} />\n    </React.Suspense>\n  </>\n)};\n\nexport default App;\n","import React from 'react';\nimport ReactPlayer from 'react-player';\nimport getChannel from '../fetchChannels';\n\nconst VideoPlayer = ({match}) => {\n  const [channel, setChannel] = React.useState({url: null});\n  const [error, setError] = React.useState({\n    isError: false,\n    details: {},\n  });\n  \n  React.useEffect(() => {\n    const fetchChannels = async () => {\n      const channelData = await getChannel(`(where: {id: {_eq: ${match.params.id}}})`);\n      setChannel(channelData[0]);\n    }\n    fetchChannels();\n  }, [match.params.id]);\n  \n  return (\n    <>\n    { error.isError && (<div className=\"absolute top-0 z-10 flex justify-center items-end w-screen h-64\">\n      <div>\n        <div className=\"text-2xl text-gray-100 \">An error occurred requesting video stream</div>\n        <div className=\"text-gray-400\">Reason: {error.details.type} </div>\n      </div>\n    </div>)}\n    <div >\n      <div className='relative h-screen'>\n        <ReactPlayer \n          className='absolute' \n          url={channel.url} \n          playing \n          controls \n          width='100%' \n          height='100%'\n          config={{\n            file: {\n              attributes: {\n                crossOrigin: 'true'\n              }\n            }\n          }}\n          onError = {(err, data) => {\n            return setError({\n              isError: true,\n              details: data\n            })\n          }}\n        />\n      </div>\n    </div>\n    </>\n  );\n};\n\nexport default VideoPlayer;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter as Router, Switch, Route} from 'react-router-dom';\nimport './assets/main.css';\nimport App from './components/App';\nimport VideoPlayer from './components/videoPlayer';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render((\n  <React.StrictMode>\n    <Router>\n      <Switch>\n        <Route exact path='/' component={App} />\n        <Route path='/:id' component={VideoPlayer} />\n        {/* <Route component={NotFound} /> */}\n      </Switch>\n    </Router>\n  </React.StrictMode>\n), document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}